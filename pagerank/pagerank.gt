element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex, Vertex, int) = load (argv[1]);
const outDegrees : edgeset{Edge}(Vertex, Vertex, int) = load (argv[2]);
const out_degree : vector{Vertex}(int);
const max_out_degree : int;

const vertices : vertexset{Vertex};

const cur_rank : vector{Vertex}(float);
const ngh_sum : vector{Vertex}(float);

const delta : vector{Vertex}(float);
const damp : float = 0.85;
const beta_score : float;
const epsilon2 : float = 0.1;
const epsilon : float = 0.0000001;
const init_delta: float;

func updateEdge(src : Vertex, dst : Vertex, mag : int)
	 % TODO update this to use out_degree self edges............
    ngh_sum[dst] += (delta[src]*mag)/max_out_degree;
end

func updateVertexFirstRound(v : Vertex) -> output : bool
   	ngh_sum[v] += (delta[v] * (max_out_degree - out_degree[v])) / max_out_degree;

    delta[v] = damp*(ngh_sum[v]) + beta_score;
    cur_rank[v] += delta[v];
    delta[v] = delta[v]-1.0/edges.getVertices();
    output = (fabs(delta[v]) > epsilon2*cur_rank[v]);
    ngh_sum[v] = 0;
end

func updateVertex(v : Vertex) -> output : bool
   ngh_sum[v] += (delta[v] * (max_out_degree - out_degree[v])) / max_out_degree;
   delta[v] = ngh_sum[v]*damp;
   cur_rank[v] += delta[v];
   ngh_sum[v] = 0;
   output = fabs(delta[v]) > epsilon2*cur_rank[v];
   % output = true;
end

func initVectors(v : Vertex)
    cur_rank[v] = 0.0;
    ngh_sum[v] = 0.0;
    delta[v] = init_delta;
end

func initOutDegree(src : Vertex, dst : Vertex, mag : int )
	 % print "epic";
	 % print src;
	 % print mag;
	 out_degree[src] = mag;
end


func set_graph()

    vertices = edges.getVertices();

    cur_rank = new vector{Vertex}(float)();
    ngh_sum = new vector{Vertex}(float)();
    delta = new vector{Vertex}(float)();

	outDegrees.apply(initOutDegree);

	max_out_degree = out_degree.max();


    beta_score = (1.0 - damp) / edges.getVertices();
    init_delta = 1.0 / edges.getVertices();
    vertices.apply(initVectors);
end

const final_ranks : vector{Vertex}(float);

func main()
	set_graph();

	% TODO find max_out_degree (paralell max?); then remove it from self_nodes

    var n : int = edges.getVertices();
    var frontier : vertexset{Vertex} = new vertexset{Vertex}(n);

	% for i in 0:n
		% print "epic";
		% print selfEdges[i][i];
	% end
		

    for i in 1:10
        #s1# edges.from(frontier).apply(updateEdge);
        var output : vertexset{Vertex};
        if i == 1
           output = vertices.filter(updateVertexFirstRound);
        else
           output = vertices.filter(updateVertex);
        end
        delete frontier;
        frontier = output;
    end
    delete frontier;
    final_ranks = cur_rank;

	for i in 0:n
		print i;
		print final_ranks[i];
	end

end

schedule:
    program->configApplyDirection("s1", "DensePull")->configApplyParallelization("s1","dynamic-vertex-parallel");
